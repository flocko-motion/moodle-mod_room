{"version":3,"sources":["../src/date_reload.js"],"names":["define","LoadingIcon","Ajax","Notification","selectorDay","document","getElementById","selectorMonth","selectorYear","roomPlanContainer","displayingDate","cmId","datesEqual","date1","date2","day","month","year","selectedDate","Math","floor","value","reloadRoomPlanIfDateChanged","window","onbeforeunload","iWillLoad","innerHTML","loadingicon","addIconToContainerWithPromise","request","methodname","args","date","cmid","call","then","response","resolve","html","history","pushState","url","fail","exception","init","initialDate","style","display","setInterval"],"mappings":"AA2BAA,OAAM,wBAAC,CACH,kBADG,CAEH,WAFG,CAGH,mBAHG,CAAD,CAIH,SACCC,CADD,CAECC,CAFD,CAGCC,CAHD,CAID,IACQC,CAAAA,CAAW,CAAGC,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CADtB,CAEQC,CAAa,CAAGF,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,CAFxB,CAGQE,CAAY,CAAGH,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAHvB,CAKQG,CAAiB,CAAGJ,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAL5B,CAOMI,CAPN,CAQMC,CARN,CAUQC,CAAU,CAAG,SAASC,CAAT,CAAgBC,CAAhB,CAAuB,CACtC,MAAOD,CAAAA,CAAK,CAACE,GAAN,GAAcD,CAAK,CAACC,GAApB,EAA2BF,CAAK,CAACG,KAAN,GAAgBF,CAAK,CAACE,KAAjD,EAA0DH,CAAK,CAACI,IAAN,GAAeH,CAAK,CAACG,IACzF,CAZH,CAcQC,CAAY,CAAG,UAAW,CAC5B,MAAO,CACHH,GAAG,CAAEI,IAAI,CAACC,KAAL,CAAWhB,CAAW,CAACiB,KAAvB,CADF,CAEHL,KAAK,CAAEG,IAAI,CAACC,KAAL,CAAWb,CAAa,CAACc,KAAzB,CAFJ,CAGHJ,IAAI,CAAEE,IAAI,CAACC,KAAL,CAAWZ,CAAY,CAACa,KAAxB,CAHH,CAKV,CApBH,CAsBQC,CAA2B,CAAG,UAAW,CAE3CC,MAAM,CAACC,cAAP,CAAwB,IAAxB,CAEA,GAAIZ,CAAU,CAACF,CAAD,CAAiBQ,CAAY,EAA7B,CAAd,CAAgD,CAC5C,MACH,CAEDR,CAAc,CAAGQ,CAAY,EAA7B,CACA,GAAIO,CAAAA,CAAS,CAAGf,CAAhB,CAEAD,CAAiB,CAACiB,SAAlB,CAA8B,EAA9B,CAX2C,GAYrCC,CAAAA,CAAW,CAAG1B,CAAW,CAAC2B,6BAAZ,CAA0CnB,CAA1C,CAZuB,CAcrCoB,CAAO,CAAG,CACZC,UAAU,CAAE,6BADA,CAEZC,IAAI,CAAE,CACFC,IAAI,CAAEtB,CADJ,CAEFuB,IAAI,CAAEtB,CAFJ,CAFM,CAd2B,CAsB3CT,CAAI,CAACgC,IAAL,CAAU,CAACL,CAAD,CAAV,EAAqB,CAArB,EACKM,IADL,CACU,SAACC,CAAD,CAAc,CAChB,GAAIxB,CAAU,CAACM,CAAY,EAAb,CAAiBO,CAAjB,CAAd,CAA2C,CACvCE,CAAW,CAACU,OAAZ,GAEA5B,CAAiB,CAACiB,SAAlB,CAA8BU,CAAQ,CAACE,IAAvC,CAGAC,OAAO,CAACC,SAAR,CAAkB,IAAlB,CAAwB,IAAxB,CAA8B,IAAMJ,CAAQ,CAACK,GAA7C,CACH,CACJ,CAVL,EAWKC,IAXL,CAWUvC,CAAY,CAACwC,SAXvB,CAYH,CAxDH,CA0DE,MAAO,CACHC,IAAI,CAAE,cAASC,CAAT,CAAsBZ,CAAtB,CAA4B,CAC9B5B,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,EAA2CwC,KAA3C,CAAiDC,OAAjD,CAA2D,MAA3D,CAGArC,CAAc,CAAGmC,CAAjB,CACAlC,CAAI,CAAGsB,CAAP,CAGAe,WAAW,CAAC1B,CAAD,CAA8B,GAA9B,CACd,CAVE,CAYV,CA9EK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AJAX reload of room plan on date change.\n *\n * @package    mod_room\n * @copyright  2020 Leo Auri <code@leoauri.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/*eslint no-trailing-spaces: \"warn\"*/\n/*eslint no-unused-vars: \"warn\"*/\n/*eslint no-console: \"warn\"*/\n\ndefine([\n    'core/loadingicon',\n    'core/ajax',\n    'core/notification',\n], function(\n    LoadingIcon,\n    Ajax,\n    Notification,\n) {\n    const selectorDay = document.getElementById('id_displaydate_day');\n    const selectorMonth = document.getElementById('id_displaydate_month');\n    const selectorYear = document.getElementById('id_displaydate_year');\n\n    const roomPlanContainer = document.getElementById('mod-room-room-plan');\n\n    let displayingDate;\n    let cmId;\n\n    const datesEqual = function(date1, date2) {\n        return date1.day === date2.day && date1.month === date2.month && date1.year === date2.year;\n    };\n\n    const selectedDate = function() {\n        return {\n            day: Math.floor(selectorDay.value),\n            month: Math.floor(selectorMonth.value),\n            year: Math.floor(selectorYear.value)\n        };\n    };\n\n    const reloadRoomPlanIfDateChanged = function() {\n        // remove the dirty form checker, there is no submit of the form to make it clean\n        window.onbeforeunload = null;\n        \n        if (datesEqual(displayingDate, selectedDate())) {\n            return;\n        }\n\n        displayingDate = selectedDate();\n        let iWillLoad = displayingDate;\n\n        roomPlanContainer.innerHTML = '';\n        const loadingicon = LoadingIcon.addIconToContainerWithPromise(roomPlanContainer);\n\n        const request = {\n            methodname: 'mod_room_room_plan_rendered',\n            args: {\n                date: displayingDate,\n                cmid: cmId\n            }\n        };\n\n        Ajax.call([request])[0]\n            .then((response) => {\n                if (datesEqual(selectedDate(), iWillLoad)) {\n                    loadingicon.resolve();\n                    \n                    roomPlanContainer.innerHTML = response.html;\n                    \n                    // Push updated URL\n                    history.pushState(null, null, '?' + response.url);\n                }\n            })\n            .fail(Notification.exception);\n    };\n\n    return {\n        init: function(initialDate, cmid) {\n            document.getElementById('id_submitbutton').style.display = 'none';\n\n            // store initial date value\n            displayingDate = initialDate;\n            cmId = cmid;\n\n            // poll for changed date fields\n            setInterval(reloadRoomPlanIfDateChanged, 250);\n        }\n    };\n});"],"file":"date_reload.min.js"}